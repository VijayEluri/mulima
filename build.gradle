plugins {
  id 'gradle-clojure.clojure' version '0.4.0'
  id 'application'
  id 'org.ajoberstar.grgit' version '3.0.0'
  id 'org.ajoberstar.reckon' version '0.9.0'
}

group = 'org.ajoberstar'

reckon {
  normal = scopeFromProp()
  preRelease = snapshotFromProp()
}

repositories {
  jcenter()
  maven {
    name = 'Clojars'
    url = 'https://repo.clojars.org/'
  }
}

dependencies {
  // clojure
  implementation('org.clojure:clojure:1.10.0-beta8')

  implementation 'org.clojure:core.async:latest.release'

  // util
  implementation 'org.clojure:tools.logging:latest.release'
  implementation 'org.ajoberstar:ike.cljj:latest.release'
  implementation 'com.rpl:specter:latest.release'

  // io
  implementation 'commons-codec:commons-codec:latest.release'
  implementation 'me.raynes:conch:latest.release'
  implementation 'org.clojure:data.xml:latest.release'

  // testing
  testImplementation 'junit:junit:latest.release'
  testImplementation 'org.clojure:test.check:latest.release'

  // dev
  devImplementation 'org.clojure:tools.namespace:latest.release'
}

clojure {
  builds {
    main {
      aotAll()
    }
  }
}

sourceSets.all { sourceSet ->
  configurations[sourceSet.compileClasspathConfigurationName].resolutionStrategy.activateDependencyLocking()
  configurations[sourceSet.runtimeClasspathConfigurationName].resolutionStrategy.activateDependencyLocking()
}

task lock {
  doFirst { assert gradle.startParameter.writeDependencyLocks }
  doLast {
    sourceSets.all { sourceSet ->
      configurations[sourceSet.compileClasspathConfigurationName].resolve()
      configurations[sourceSet.runtimeClasspathConfigurationName].resolve()
    }
  }
}
